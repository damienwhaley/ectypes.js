Drafts.js: an object & model generator with fake data. Define a set of Drafts for your model layer and have them populated with fake data.

draft [drɑːft] n 1. a plan, sketch, or drawing of something

DSL

this is the rough dsl I'm aiming for

//factory call to generate vanilla obj (no ORM) - Post
post = drafts.post();


//factory call to generate a model instance, created
comment = Comment.draft();
should.exist comment.id

//factory call to generate a model instance, unsaved
comment = Comment.sketch();
should.not.exist comment.id


//-----------
drafts = require("drafts")
drafts.defaultStrategy = //an ORM strategy (see below)

drafts.plan(
	{
		Post: {
			topic: Faker.Lorem.words(),
			hasMany: Comment
		}
	});

drafts.plan(
	{
		Comment: {
			username: Faker.Name.findName(),
			text: Faker.Lorem.sentences()
		}
	});




Strategies and ORMS
------------
There are two tricks to wrapping Drafts DSL around your favourite ORM - ensuring that foo.draft({...}) calls the relevant foo.save({...}) function (the draft function should return a persisted object) and integrating ORM specific functionality (e.g. associations) into the draft.


Drafts will scan the strategy for variables that reference functions. If that variable name is used in the draft plan, then Drafts will call the strategy's function by the same name:

for example,


Example Draft.NodeORM (node-orm) Strategy:

{
	hasMany: function(){
			
	},
	save: Model.save()
}

An exception is made for the save function - Drafts will ignore it if it is found in a plan.


1 - http://en.wikipedia.org/wiki/Strategy_pattern



Drafts uses a simple lifecycle 