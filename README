Drafts.js: an object & model generator with fake data. Define a set of Drafts for your model layer and have them populated with fake data.

draft [drɑːft] n 1. a plan, sketch, or drawing of something

DSL

this is the rough dsl I'm aiming for

//factory call to generate vanilla obj (no ORM) - Post
foo = drafts.foo();


//factory call to generate a model instance, created
comment = Comment.draft();
should.exist comment.id

//factory call to generate a model instance, unsaved
comment = Comment.sketch();
should.not.exist comment.id


Draft Plans
-----------

Drafts are defined with plans. Plans simply explain the type of data the properties and functions of a model possess. 

drafts = require("drafts")
drafts.defaultStrategy = //an ORM strategy (see below)

drafts.plan(
	{
		Post: {
			topic: Faker.Lorem.words(),
			hasMany: Comment //this function is supplied by a strategy (see below)
		}
	});

drafts.plan(
	{
		Comment: {
			username: Faker.Name.findName(),
			text: Faker.Lorem.sentences()
		}
	});

Future ideas - a drafts.plans() function that takes an array of plans.


Drafts Strategies and ORMS
--------------------------

Strategies integrate an ORM into Drafts.

Stratgies are responsible for 3 things:

1) Handling the database connection.

Fairly obvious. 

2) Telling Drafts which ORM on the function to call when saving in the database, e.g. Comment.draft() needs to know how to create and save a Comment in the db.

...


3) Defining further ORM specific functions that can be used in Drafts plans, for e.g. associations between models (and plans)

Drafts will scan the strategy for variables that reference functions. If that variable name is used in the draft plan, then Drafts will call the strategy's function by the same name.

An example strategy:

{
	hasMany: function(plan){
		//we create 50 of plan and build the association here
	},
	save: model.save()
}

An exception is made for the save function - Drafts will ignore it if it is found in a plan.


1 - http://en.wikipedia.org/wiki/Strategy_pattern



Drafts uses a simple lifecycle 